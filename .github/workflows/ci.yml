name: CI
permissions:
  contents: read

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Fast checks that run first to fail fast
  quick-checks:
    name: Quick Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v5

      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Setup cache
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: "quick-checks"

      - name: Run cargo check
        run: cargo check --all-targets --all-features

      - name: Run cargo fmt
        run: cargo fmt --all -- --check

      - name: Run cargo clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

  # Main test suite - runs on all platforms and Rust versions
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    needs: quick-checks
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
        rust: [stable, beta]
        exclude:
          - os: windows-latest
            rust: beta
          - os: macOS-latest
            rust: beta
    steps:
      - name: Checkout sources
        uses: actions/checkout@v5

      - name: Install ${{ matrix.rust }} toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}

      - name: Setup cache
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: "test-cache-${{ matrix.os }}-${{ matrix.rust }}"

      - name: Run tests (including integration tests)
        run: cargo test --all-features --workspace
        env:
          RUST_BACKTRACE: 1
          TEMP: ${{ runner.temp }}
          TMP: ${{ runner.temp }}

  # Security checks - run in parallel with tests
  security:
    name: Security Checks
    runs-on: ubuntu-latest
    needs: quick-checks
    steps:
      - name: Checkout sources
        uses: actions/checkout@v5

      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Setup cache
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: "security-cache"

      - name: Install security tools
        run: |
          cargo install cargo-audit cargo-deny

      - name: Run cargo audit
        run: cargo audit

      - name: Run cargo deny
        run: cargo deny check

  # SonarCloud analysis - optimized to reuse test artifacts
  sonarcloud:
    name: SonarCloud Analysis
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.actor != 'dependabot[bot]')
    permissions:
      contents: read
      packages: read
    steps:
      - name: Checkout sources
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: llvm-tools-preview, clippy

      - name: Setup cache
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: "sonar-cache"

      - name: Install cargo-llvm-cov
        run: cargo install cargo-llvm-cov

      - name: Generate code coverage (without running tests again)
        run: cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info
        env:
          RUST_BACKTRACE: 1

      - name: Generate clippy report
        run: |
          cargo clippy --all-targets --all-features --message-format=json > clippy-report.json || true

      - name: SonarCloud Scan
        continue-on-error: true
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # Note: SONAR_TOKEN should be configured in repository secrets
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # Documentation and Docker build - only for pushes to main branches
  build-and-docs:
    name: Build & Documentation
    runs-on: ubuntu-latest
    needs: quick-checks
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    steps:
      - name: Checkout sources
        uses: actions/checkout@v5

      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Setup cache
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: "build-docs-cache"

      - name: Build documentation
        run: cargo doc --all-features --no-deps --document-private-items

      - name: Check for broken links in docs
        run: |
          cargo install cargo-deadlinks
          cargo deadlinks --check-http

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: false
          tags: ferragate:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Benchmarks - only for main branch pushes
  benchmark:
    name: Benchmark
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: read
      issues: write
    steps:
      - name: Checkout sources
        uses: actions/checkout@v5

      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Setup cache
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: "benchmark-cache"

      - name: Run benchmarks
        run: cargo bench --all-features

      - name: Upload benchmark report
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-results
          path: target/criterion/
          retention-days: 30
